{#
# libvirt configuration file for a (fairly) generic vm
# https://libvirt.org/formatdomain.html
#
# Conditionals:
#   - current_vm_firstboot activates a floppy and cdrom, and boots from the latter
#   - current_vm_netboot activates PXE in a safe way (to prevent endless loops)
#   - current_vm_directboot is for RHCOS only and sets kernel boot files and options
#   - vm_use_bridge=yes will create a bridged interface (expects vm_bridge_name)
#   - vm_use_bridge=no will create a network-attached interface (exp vm_network_name)
#
# If VM name is 'services', then vm_svc_add_interface=yes will configure an
# additional interface and attach it to a bridge called vm_svc_add_bridge_name
# with a MAC address of vm_svc_add_macaddr.
#
# TODO: how to assign an IP to the secondary iface?
#}
<domain type='kvm'>
  <name>{{ current_vm_name }}</name>
  <memory unit='GiB'>{{ current_vm_mem_gb }}</memory>
  <currentMemory unit='GiB'>{{ current_vm_mem_gb }}</currentMemory>
  <vcpu placement='static'>{{ current_vm_ncpus }}</vcpu>
  <os>
    <type arch='x86_64' machine='pc-i440fx-rhel7.0.0'>hvm</type>
{% if current_vm_firstboot | default(false) %}
    <boot dev='cdrom'/>
{% elif current_vm_netboot | default(false) %}
    <boot dev='hd'/>
    <boot dev='network'/>
{% elif current_vm_directboot | default(false) %}
    <kernel>/var/lib/libvirt/images/rhcos-{{ coreos_release }}-installer-kernel</kernel>
    <initrd>/var/lib/libvirt/images/rhcos-{{ coreos_release }}-installer-initramfs.img</initrd>
    <cmdline>{{ coreos_boot_command_line }}</cmdline>
{% else %}
    <boot dev='hd'/>
{% endif %}
    <bootmenu enable='yes'/>
  </os>
  <features>
    <acpi/>
    <apic/>
  </features>
  <cpu mode='host-model' check='partial'>
    <model fallback='allow'/>
  </cpu>
  <clock offset='utc'>
    <timer name='rtc' tickpolicy='catchup'/>
    <timer name='pit' tickpolicy='delay'/>
    <timer name='hpet' present='no'/>
  </clock>
  <on_poweroff>destroy</on_poweroff>
  <on_reboot>restart</on_reboot>
  <on_crash>destroy</on_crash>
  <pm>
    <suspend-to-mem enabled='no'/>
    <suspend-to-disk enabled='no'/>
  </pm>
  <devices>
    <emulator>/usr/libexec/qemu-kvm</emulator>
    <disk type='file' device='disk'>
      <driver name='qemu' type='qcow2'/>
      <source file='/var/lib/libvirt/images/{{ current_vm_name }}-vda.qcow2'/>
      <target dev='vda' bus='virtio'/>
    </disk>
{% if current_vm_firstboot | default(false) %}
    <disk type='file' device='disk'>
      <driver name='qemu' type='raw'/>
      <source file='/var/lib/libvirt/images/{{ current_vm_name }}-fd.img'/>
      <target dev='vdb' bus='virtio'/>
    </disk>
    <disk type='file' device='cdrom'>
      <driver name='qemu' type='raw'/>
      <source file='/var/lib/libvirt/images/rhel-8.0-x86_64-dvd.iso'/>
      <target dev='vdc' bus='virtio'/>
    </disk>
{% endif %}
    <controller type='usb' index='0' model='nec-xhci'>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x05' function='0x0'/>
    </controller>
    <controller type='pci' index='0' model='pci-root'/>
    <controller type='ide' index='0'>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x01' function='0x1'/>
    </controller>
    <controller type='virtio-serial' index='0'>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x06' function='0x0'/>
    </controller>
{% if vm_use_bridge | default(false) %}
    <interface type='bridge'>
      <mac address='{{ current_vm_mac }}'/>
      <source bridge='{{ vm_bridge_name }}'/>
      <model type='virtio'/>
    </interface>
{% else %}
    <interface type='network'>
      <mac address='{{ current_vm_mac }}'/>
      <source network='{{ vm_network_name }}'/>
      <model type='virtio'/>
    </interface>
{% endif %}
{% if current_vm_name == 'services' and (vm_svc_add_interface | default(false)) %}
    <interface type='bridge'>
      <mac address='{{ vm_svc_add_macaddr }}'/>
      <source bridge='{{ vm_svc_add_bridge_name }}'/>
      <model type='virtio'/>
    </interface>
{% endif %}
    <serial type='pty'>
      <target type='isa-serial' port='0'>
        <model name='isa-serial'/>
      </target>
    </serial>
    <console type='pty'>
      <target type='serial' port='0'/>
    </console>
    <channel type='unix'>
      <target type='virtio' name='org.qemu.guest_agent.0'/>
      <address type='virtio-serial' controller='0' bus='0' port='1'/>
    </channel>
    <channel type='spicevmc'>
      <target type='virtio' name='com.redhat.spice.0'/>
      <address type='virtio-serial' controller='0' bus='0' port='2'/>
    </channel>
    <input type='tablet' bus='usb'>
      <address type='usb' bus='0' port='1'/>
    </input>
    <input type='mouse' bus='ps2'/>
    <input type='keyboard' bus='ps2'/>
    <graphics type='spice' autoport='yes'>
      <listen type='address'/>
      <image compression='off'/>
    </graphics>
    <video>
      <model type='qxl' ram='65536' vram='65536' vgamem='16384' heads='1' primary='yes'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x02' function='0x0'/>
    </video>
    <redirdev bus='usb' type='spicevmc'>
      <address type='usb' bus='0' port='2'/>
    </redirdev>
    <redirdev bus='usb' type='spicevmc'>
      <address type='usb' bus='0' port='3'/>
    </redirdev>
    <memballoon model='virtio'>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x08' function='0x0'/>
    </memballoon>
  </devices>
</domain>
